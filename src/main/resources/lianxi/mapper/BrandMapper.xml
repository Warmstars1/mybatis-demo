<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
      namespace:名称空间
-->
<mapper namespace="lianxi.mapper.BrandMapper">
    <!--
    数据库表的名称 和 实体类的属性名称不一样，则不能自动封装
                * 起别名：对不一样的列名起别名，让别名和实体类的属性名一样
                缺点：每次查询都要定义一次别名
                *sql片段
                缺点：不灵活
                *resultMap
                1.定义<resultMap>标签
                2.使用resultMap属性替换resultType属性
    -->
    <!--
    id:唯一标识
    type：映射的类型，支持别名
    -->
    <resultMap id="brandResultMap" type="brand">
        <!--
        id：完成主键字段的映射
              column：表的列名
              property：实体类的属性名
        result：完成一般字段的映射
              column：表的列名
              property：实体类的属性名
        -->
        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName"></result>
    </resultMap>


    <!--
            sql片段
    -->
<!--    <sql id="brand_column">-->
<!--        id,brand_name as brandName,company_name as companyName,ordered,description,status-->
<!--    </sql>-->
    <!--    <select id="selectAll" resultType="Brand">-->
    <!--        select-->
    <!--            <include refid="brand_column"></include>-->
    <!--        from tb_brand;-->
    <!--    </select>-->
    <select id="selectAll" resultMap="brandResultMap">
        select *
        from tb_brand;
    </select>

<!--
            *参数占位符：
            1.#{}:将其替换为？，为了防止SQL注入
            2.${}:拼SQL，会存在SQl注入问题
            3.使用时机：
              *参数传递的时候：#{}
              *表名或者列名不确定的情况下：${} Sql注入问题

            *参数类型：parameterType:可以省略
            *特殊字符处理：
             1.转义字符：
             2.CDATA区
             <![CDATA[ 内容 ]]>;

-->
    <select id="selectById" resultMap="brandResultMap">
select * from tb_brand where id =#{id};
    </select>
<!--条件查询-->
<!--    <select id="selectByCondition" resultMap="brandResultMap">-->
<!--        select *-->
<!--        from tb_brand-->
<!--        where status = #{status}-->
<!--          and company_name like #{companyName}-->
<!--          and brand_name like #{brandName}-->
<!--    </select>-->
<!--
 动态条件查询
   *if:条件判断
      *test 逻辑表达式
   * 问题:
    * 恒等式
    *<where> 替换 where 关键字
 -->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
--         where 1=1
          <where>
        <if test="status != null">
            and  status = #{status}
        </if>
        <if test="companyName !=null and companyName !=''">
            and company_name like #{companyName}
        </if>
        <if test="brandName != null and brandName !=''">
             and brand_name like #{brandName}
        </if>
          </where>
    </select>

<!--    <select id="selectByConditionSingle" resultMap="brandResultMap">-->
<!--        select * from tb_brand-->
<!--        where-->
<!--        <choose>-->
<!--            <when test="status != null">-->
<!--                status=#{status}-->
<!--            </when>-->
<!--            <when test="companyName !=null and companyName !=''">-->
<!--                company_name like #{companyName}-->
<!--            </when>-->
<!--            <when test="brandName != null and brandName !=''">-->
<!--                brand_name like #{brandName}-->
<!--            </when>-->
<!--            <otherwise>-->
<!--                1=1-->
<!--            </otherwise>-->
<!--        </choose>-->
<!--    </select>-->

    <select id="selectByConditionSingle" resultMap="brandResultMap">
        select * from tb_brand
        <where>
            <choose>
                <when test="status != null">
                    status=#{status}
                </when>
                <when test="companyName !=null and companyName !=''">
                    company_name like #{companyName}
                </when>
                <when test="brandName != null and brandName !=''">
                    brand_name like #{brandName}
                </when>
            </choose>
        </where>
    </select>
    <insert id="add" useGeneratedKeys="true" keyProperty="id">-- 返回数据添加的主键
        insert into tb_brand (brand_name, company_Name, ordered,description,status)
        values (#{brandName},#{companyName},#{ordered},#{description},#{status});
    </insert>
    <update id="update">
        update tb_brand
        <set><if test="brandName !=null and brandName !=''">
            brand_name=#{brandName},
            </if>
        <if test="companyName !=null and companyName !=''">
            company_Name =#{companyName},
        </if>
        <if test=" description !=null and  description !=''">
            description=#{description},
        </if>
        <if test="ordered !=null and ordered !=''">
            ordered=#{ordered},
        </if>
        <if test=" status!=null ">
            status=#{status}
        </if>
        where id =#{id};
        </set>
    </update>

    <delete id="deleteById">
        delete from tb_brand where  id=#{id};
    </delete>
    <!--
    mybatis会将数据封装为一个Map集合。
    *默认：array =数组
    可以用@Param注解改变map集合的默认key的名字
    foreach里面的
    separator属性可以将值用东西分开
    open属性在foreach开始时拼一个符号
    close属性在foreach在结束时拼一个符号
    -->

    <delete id="deleteByIds">
        delete from tb_brand where  id in
            <foreach collection="ids" item="id" separator="," open="(" close=")">
                #{id}
            </foreach>
            ;
    </delete>
</mapper>